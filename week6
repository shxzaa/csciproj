#include <webots/robot.h>
#include <webots/light_sensor.h>
#include <webots/distance_sensor.h>
#include <webots/motor.h>
#include <webots/led.h>
#include <stdio.h>
#include <math.h>

#define TIME_STEP 32
#define MAX_SPEED 6.28
#define SECOND_CYCLE_START_TIME 270.0 // 4 minutes 30 seconds
#define LIGHT_THRESHOLD 4211.852150  // Predefined threshold for light intensity

// Sensor and motor tags
WbDeviceTag left_motor, right_motor;
WbDeviceTag ps[8];  // 8 proximity sensors
WbDeviceTag light_sensor;
WbDeviceTag led;

// Flags for handling cycle logic
bool exploration_done = false;
bool second_cycle_started = false;
double max_light_intensity = 0.0;  // Tracks the brightest light intensity

// Initialize devices
void initialize_devices() {
  left_motor = wb_robot_get_device("left wheel motor");
  right_motor = wb_robot_get_device("right wheel motor");
  if (left_motor == (WbDeviceTag)NULL || right_motor == (WbDeviceTag)NULL) {
    printf("Error: Motors not found!\n");
    return;
  }

  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);

  // Initialize proximity sensors
  for (int i = 0; i < 8; i++) {
    char sensor_name[4];
    sprintf(sensor_name, "ps%d", i);
    ps[i] = wb_robot_get_device(sensor_name);
    wb_distance_sensor_enable(ps[i], TIME_STEP);
  }

  // Initialize light sensor
  light_sensor = wb_robot_get_device("ls0");
  if (light_sensor == (WbDeviceTag)NULL) {
    printf("Error: Light sensor not found!\n");
    return;
  }
  wb_light_sensor_enable(light_sensor, TIME_STEP);

  // Initialize LED
  led = wb_robot_get_device("led0");
  if (led == (WbDeviceTag)NULL) {
    printf("Error: LED not found!\n");
  }
  wb_led_set(led, 0);  // Turn off LED initially
}

// Blink LED three times
void blink_led() {
  for (int i = 0; i < 3; i++) {
    wb_led_set(led, 1);  // Turn LED on
    wb_robot_step(1000); // Wait for 1 second
    wb_led_set(led, 0);  // Turn LED off
    wb_robot_step(1000); // Wait for 1 second
  }
}

// Process sensors and control the robot
void process_sensors_and_control() {
  double current_time = wb_robot_get_time();

  // Begin second cycle at 4 minutes 30 seconds
  if (current_time >= SECOND_CYCLE_START_TIME && !second_cycle_started) {
    second_cycle_started = true;
    printf("Second cycle started at time: %f seconds\n", current_time);
  }

  // Get proximity sensor values
  double ps_values[8];
  for (int i = 0; i < 8; i++) {
    ps_values[i] = wb_distance_sensor_get_value(ps[i]);
  }

  // Get current light intensity
  double current_light_intensity = wb_light_sensor_get_value(light_sensor);

  // Track the brightest light intensity during exploration (first cycle)
  if (!second_cycle_started) {
    if (current_light_intensity > max_light_intensity) {
      max_light_intensity = current_light_intensity;
      printf("New brightest light intensity recorded: %f\n", max_light_intensity);
    }
  } else {
    // In second cycle, compare current intensity with threshold
    if (current_light_intensity >= LIGHT_THRESHOLD) {
      printf("Threshold reached: stopping at light intensity %f\n", current_light_intensity);
      wb_motor_set_velocity(left_motor, 0.0);  // Stop the left motor
      wb_motor_set_velocity(right_motor, 0.0); // Stop the right motor
      blink_led();  // Blink the LED three times
      return;  // Immediately stop further movement after blinking
    }
  }

  // Movement logic (only executed if the robot hasn't stopped yet)
  double left_speed = MAX_SPEED;
  double right_speed = MAX_SPEED;

  bool front_obstacle = ps_values[0] > 80.0 || ps_values[7] > 80.0;
  bool side_left = ps_values[5] > 80.0;
  bool side_right = ps_values[2] > 80.0;

  if (front_obstacle) {
    if (side_left && side_right) {
      left_speed = -0.5 * MAX_SPEED;
      right_speed = -0.5 * MAX_SPEED;
    } else if (side_left) {
      left_speed = MAX_SPEED;
      right_speed = 0.1 * MAX_SPEED;
    } else if (side_right) {
      left_speed = 0.1 * MAX_SPEED;
      right_speed = MAX_SPEED;
    } else {
      left_speed = MAX_SPEED;
      right_speed = -0.1 * MAX_SPEED;
    }
  } else {
    if (side_left && !side_right) {
      left_speed = 0.1 * MAX_SPEED;
      right_speed = MAX_SPEED;
    } else if (!side_left && !side_right) {
      left_speed = 0.5 * MAX_SPEED;
      right_speed = 0.5 * MAX_SPEED;
    } else if (!side_left && side_right) {
      left_speed = 0.1 * MAX_SPEED;
      right_speed = MAX_SPEED;
    }
  }

  // Set motor speeds
  wb_motor_set_velocity(left_motor, left_speed);
  wb_motor_set_velocity(right_motor, right_speed);
}

int main() {
  wb_robot_init();

  initialize_devices();

  while (wb_robot_step(TIME_STEP) != -1) {
    process_sensors_and_control();
  }

  wb_robot_cleanup();
  return 0;
}
